{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kerkk\\\\OneDrive\\\\Ty\\xF6p\\xF6yt\\xE4\\\\FullStack\\\\FullStack\\\\part1\\\\src\\\\App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = header => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: header.course\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 2,\n    columnNumber: 10\n  }, this);\n};\n_c = Header;\nconst Part = part => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [part.par, \" \", part.exercises, \" //\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Part;\nconst Content = content => {\n  const {\n    part1,\n    exercises1,\n    part2,\n    exercises2,\n    part3,\n    exercises3\n  } = content; // I found using chat-gpt this way to use arguments too so I wanted to try it\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Part, {\n      par: part1,\n      exercises: exercises1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Part, {\n      par: part2,\n      exercises: exercises2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Part, {\n      par: part3,\n      exercises: exercises3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Content;\nconst Total = total => {\n  const {\n    exercises1,\n    exercises2,\n    exercises3\n  } = total;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Number of exercises \", exercises1 + exercises2 + exercises3]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 11\n  }, this);\n};\n_c4 = Total;\nconst App = () => {\n  const course = 'Half Stack application development';\n  const part1 = 'Fundamentals of React';\n  const exercises1 = 10;\n  const part2 = 'Using props to pass data';\n  const exercises2 = 7;\n  const part3 = 'State of a component';\n  const exercises3 = 14;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      course: course\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      part1: part1,\n      exercises1: exercises1,\n      part2: part2,\n      exercises2: exercises2,\n      part3: part3,\n      exercises3: exercises3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Total, {\n      exercises1: exercises1,\n      exercises2: exercises2,\n      exercises3: exercises3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_c5 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Part\");\n$RefreshReg$(_c3, \"Content\");\n$RefreshReg$(_c4, \"Total\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["Header","header","_jsxDEV","children","course","fileName","_jsxFileName","lineNumber","columnNumber","_c","Part","part","par","exercises","_c2","Content","content","part1","exercises1","part2","exercises2","part3","exercises3","_c3","Total","total","_c4","App","_c5","$RefreshReg$"],"sources":["C:/Users/kerkk/OneDrive/Työpöytä/FullStack/FullStack/part1/src/App.js"],"sourcesContent":["const Header = (header) => {\n  return <h1>{header.course}</h1>\n}\n\nconst Part = (part) => {\n  return (\n    <p>\n      {part.par} {part.exercises} //\n    </p>\n  )\n}\n\nconst Content = (content) => {\n  const {part1, exercises1, part2, exercises2, part3, exercises3} = content // I found using chat-gpt this way to use arguments too so I wanted to try it\n  return (\n    <div>\n      <Part \n        par={part1}\n        exercises={exercises1}\n      />\n      <Part \n        par={part2}\n        exercises={exercises2}\n      />\n      <Part \n        par={part3}\n        exercises={exercises3}\n      />\n    </div>\n  )\n}\n\nconst Total = (total) => {\n  const {exercises1, exercises2, exercises3} = total\n  return (<p>Number of exercises {exercises1 + exercises2 + exercises3}</p>)\n}\n\nconst App = () => {\n  const course = 'Half Stack application development'\n  const part1 = 'Fundamentals of React'\n  const exercises1 = 10\n  const part2 = 'Using props to pass data'\n  const exercises2 = 7\n  const part3 = 'State of a component'\n  const exercises3 = 14\n\n  return (\n    <div>\n      <Header course={course} />\n      <Content \n        part1={part1} \n        exercises1={exercises1}\n        part2={part2}\n        exercises2={exercises2}\n        part3={part3}\n        exercises3={exercises3}\n      />\n      <Total \n        exercises1={exercises1}\n        exercises2={exercises2}\n        exercises3={exercises3}\n      />\n    </div>\n  )\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}